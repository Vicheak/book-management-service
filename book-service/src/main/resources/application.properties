# configure server port
server.port=8080

# name the book service application server
spring.application.name=book

# configure datasource
# spring.datasource.username=book
# spring.datasource.password=book@123
# spring.datasource.url=jdbc:postgresql://book_service_db:5432/book_db

spring.datasource.username=testdemo
spring.datasource.password=testdemo@123
spring.datasource.url=jdbc:postgresql://localhost:5432/db_test

# configure jpa
spring.jpa.open-in-view=false
spring.jpa.hibernate.ddl-auto=update

# configure liquibase
spring.liquibase.change-log=classpath:db/changelog/db.changelog-master.yml
spring.liquibase.enabled=true

# configure profiles
spring.profiles.active=prod

# configure accessing to config server (in production - service name)
# spring.config.import=configserver:http://configserver:8071/
spring.config.import=optional:configserver:http://localhost:8071/

# configure actuator endpoints
management.endpoints.web.exposure.include=*

# configure eureka client to register with service discovery agent
eureka.instance.preferIpAddress=true
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.client.service-url.defaultZone=http://localhost:9000/eureka/

# configure actuator info endpoint information
info.app.name=book-service
info.app.description=provide book service
info.app.version=1.0.0
management.info.env.enabled=true

# configure service to gracefully shutdown
management.endpoint.shutdown.enabled=true

# configure interval for clients to send heartbeat
# eureka.instance.lease-renewal-interval-in-seconds=5

# configure expiration interval for eureka to remove instance
# eureka.instance.lease-expiration-duration-in-seconds=10

# configure resilience4j properties on circuit breaker pattern
# register circuit breaker endpoints with actuator
resilience4j.circuitbreaker.configs.default.register-health-indicator=true
# minimum number of requests in the initial CLOSED state
resilience4j.circuitbreaker.instances.bookBorrowDetailSupport.minimum-number-of-calls=5
# percentage of failure threshold = 50% (number of requests = 2.5)
resilience4j.circuitbreaker.instances.bookBorrowDetailSupport.failure-rate-threshold=50
# wait duration = 3s in OPEN state
resilience4j.circuitbreaker.instances.bookBorrowDetailSupport.wait-duration-in-open-state=3000
# allow few number of requests in HALF_OPEN state
resilience4j.circuitbreaker.instances.bookBorrowDetailSupport.permitted-number-of-calls-in-half-open-state=2

# configure resilience4j properties on retry pattern
resilience4j.retry.instances.bookBorrowDetailRetry.max-attempts=3
resilience4j.retry.instances.bookBorrowDetailRetry.wait-duration=2000

# configure resilience4j properties on rate limiter pattern
# register rate limiter endpoints with actuator
resilience4j.ratelimiter.configs.default.register-health-indicator=true
resilience4j.ratelimiter.instances.bookBorrowDetailRateLimit.timeout-duration=5000
resilience4j.ratelimiter.instances.bookBorrowDetailRateLimit.limit-refresh-period=10000
resilience4j.ratelimiter.instances.bookBorrowDetailRateLimit.limit-for-period=1

# configure log level for debug log within the package
logging.level.com.vicheak.book.bookservice=DEBUG

# configure message broker using RabbitMQ
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest